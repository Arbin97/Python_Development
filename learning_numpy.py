# -*- coding: utf-8 -*-
"""learning_numpy

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1Z71vIRNsu1qbOxJSumzuVrMCc7m9wmN3
"""

import numpy as np

a= np.array([1,2,3],dtype='int32')

print(a)

# 2D array

b= np.array([[1,2,3,4],[5,6,7,8]])

print(b)

# Get dimension

a.ndim

# shape  --> (dimension,no of elements in each row)

b.shape

# type of data  and size of the whole variable used

a.dtype

a.itemsize

# total size 

a.nbytes



"""**Accessing and Editing the elements inside the numpy**

"""

ar= np.array([[1,2,3,4,5,6,7],[8,9,10,11,12,13,14]])

print(ar)

#Get specific elements   [ row,col]

ar[0][4]

ar[1,-2]

# Spefic row

ar[0,:]     # o row and all the columns

# Specific column
ar[:,2]

# Custom range   [start_index:end_index:stepsize]

ar[0,1:-1:2]

ar[1,-2]= 20
print(ar)
# changing whole col or row

ar[:,2]= 5

print(ar)

# 3d example

br= np.array([[[1,2],[3,4]],[[5,6],[7,8]]])

print(br)

# Get specific element (work outside in)

br[:,1,:]



"""#Initializing different size of arrays

"""

# all 0;s matrix

np.zeros((2,3,3))

# all 1's matrix
np.ones((4,2,2), dtype='int32')

# other numbers

np.full((2,2),99)

# array of random numbers float using random.rand 
 

ar= np.random.rand(4,2)
print(ar)

# random integer values matrix

np.random.randint(7, size=(3,4))

# creating empty array
temp= np.empty(3)

print(temp)

# creating array using linspace --> useful for graph plotting

temp2= np.linspace(2,10,5)     # (start_ele, end_ele,no_of_ele)  
print(temp2)

# numpy using algebraic functions

arr= np.array([1,2,3,5,6])

print(arr)

# performing algebraic operations
print(np.min(arr))
print(np.max(arr))
print(np.std(arr))



"""##Slicing in numpy array

"""

ar1= np.array([1,2,4,6,3,9,10,20,12,21,11])
print(ar1)

# Getting element from index 3 till index 7

print(ar1[3:7:1])

# return every other element from the given index starting at i=2 till i= 8

print(ar1[2:8:2])


# return every other element from the array
print(ar1[::2])

#Slicing 2D arrays

ar2= np.array([[1,2,3,4,5],[6,7,8,9,10]])
print(ar2)


# from second row return all the elements starting from index ==1 to index==4
print(ar2[1,1:4])

arr = np.array([10, 15, 20, 25, 30, 35, 40])
print(arr)

print(arr[1:5])

#Changing the data types in numpy using astype  method
# astype method makes copy of the array and allow to change the data type as an argument to it

arr= np.array([1.1,2.1,3.1])

newarr= arr.astype('i')   # converting the array type from double/float to integer

print(arr.dtype)

print(newarr.dtype)


print(newarr)



"""##Iteration on the numpy arrays

"""

# iteration on 1D or linear array


ar= np.array([3,4,5,1,3,55,89])

for x in ar:
  print(x,end=" ")

#iteration on 2D array 

arr= np.array([[1,2,3],[7,8,9]])

for item in arr:
  for item2 in item:
    print(item2,end=" ")
  print(end="\n")

# use of nditer() function
# This function can be used from basic to advance iterations. 


# iteration over 3d arra using nditer() function


arr= np.array([[[1,3,4],[4,5,6]],[[7,8,9],[11,23,21]]])

print(arr)


for x in np.nditer(arr):
  print(x,end=" ")



"""##Numpy Joining Array"""

# use of concatenation for joining two arrays

a1= np.linspace(2,10,6)
a2= np.linspace(3,15,8)

print(a1)
print(a2)

print(end="\n")
a3= np.concatenate((a1,a2))

print(a3)

#stacking the arrays 

a1= np.array([1,2,3])
a2= np.array([9,8,7])

a3= np.stack((a1,a2),axis=1)

print(a3)


# stacking along rows

a4= np.hstack((a1,a2))

print(a4)

# stacking along columns
a5= np.vstack((a1,a2))

print(a5)



"""##Searching in Numpy arrays"""

# searching in the numpy arrays using where() which returns the index where the target is matched

temp1= np.array([1,2,3,5,6,5,7,8,5,10,12,5])

print(np.where(temp1==5))   # it will return the indices in a tuple

print(np.where(temp1%2==0)) 


print(np.where(temp1>10))

# searchsorted() --> this will perform a binary search in the array and returns the index where ele is found.
# it is used when the given array is sorted

temp= np.array([1,9,18,79,790])

x= np.searchsorted(temp,790)

print(x)

# sorting the array

t1= np.array([1,3,2,4,5,8,7,6,10,18,19])

print(np.sort(t1))